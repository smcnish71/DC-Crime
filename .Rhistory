data(segmentationOriginal)
library(caret)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
download.packages(ElemStatLearn)
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
training <- read.csv(url(trainUrl), na.strings=c("NA","#DIV/0!",""))
testing <- read.csv(url(testUrl), na.strings=c("NA","#DIV/0!",""))
inTrain <- createDataPartition(training$classe, p=0.6, list=FALSE)
myTraining <- training[inTrain, ]
myTesting <- training[-inTrain, ]
dim(myTraining); dim(myTesting)
nzv <- nearZeroVar(myTraining, saveMetrics=TRUE)
myTraining <- myTraining[,nzv$nzv==FALSE]
nzv<- nearZeroVar(myTesting,saveMetrics=TRUE)
myTesting <- myTesting[,nzv$nzv==FALSE]
dim(myTraining)
myTraining <- myTraining[c(-1)]
trainingV3 <- myTraining
for(i in 1:length(myTraining)) {
if( sum( is.na( myTraining[, i] ) ) /nrow(myTraining) >= .7) {
for(j in 1:length(trainingV3)) {
if( length( grep(names(myTraining[i]), names(trainingV3)[j]) ) == 1)  {
trainingV3 <- trainingV3[ , -j]
}
}
}
}
# Set back to the original variable name
myTraining <- trainingV3
rm(trainingV3)
clean1 <- colnames(myTraining)
clean2 <- colnames(myTraining[, -58])  # remove the classe column
myTesting <- myTesting[clean1]         # allow only variables in myTesting that are also in myTraining
testing <- testing[clean2]             # allow only variables in testing that are also in myTraining
dim(myTesting)
dim(testing)
for (i in 1:length(testing) ) {
for(j in 1:length(myTraining)) {
if( length( grep(names(myTraining[i]), names(testing)[j]) ) == 1)  {
class(testing[j]) <- class(myTraining[i])
}
}
}
# To get the same class between testing and myTraining
testing <- rbind(myTraining[2, -58] , testing)
testing <- testing[-1,]
modFitA1 <- rpart(classe ~ ., data=myTraining, method="class")
library(rpart)
library(rpart.plot)
modFitA1 <- rpart(classe ~ ., data=myTraining, method="class")
fancyRpartPlot(modFitA1)
library(rattle)
download.packages(rattle)
install.packages(rattle)
library(rattle)
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(randomForest)
library(knitr)
install.packages("rattle", repos="http://rattle.togaware.com")
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(randomForest)
library(knitr)
library(rattle)
install.packages("rattle")
library(rattle)
library(rattle)
fancyRpartPlot(modFitA1)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(modFitA1)
predictionsA1 <- predict(modFitA1, myTesting, type = "class")
confusionMatrix(predictionsA1, myTesting$classe)
library(e1071)
install.packages("e1071")
confusionMatrix(predictionsA1, myTesting$classe)
modFitB1 <- randomForest(classe ~. , data=myTraining)
library(randomForest)
install.packages("randomForest")
library(randomForest)
modFitB1 <- randomForest(classe ~. , data=myTraining)
predictionsB1 <- predict(modFitB1, myTesting, type = "class")
confusionMatrix(predictionsB1, myTesting$classe)
set.seed(1414)
#Using Decision Trees
modFitA1 <- rpart(classe ~ ., data=myTraining, method="class")
fancyRpartPlot(modFitA1)
Predicting
predictionsA1 <- predict(modFitA1, myTesting, type = "class")
Using confusion matrix to test the results
confusionMatrix(predictionsA1, myTesting$classe)
modFitB1 <- randomForest(classe ~. , data=myTraining)
Predicting
predictionsB1 <- predict(modFitB1, myTesting, type = "class")
Using confusion matrix to test the results
confusionMatrix(predictionsB1, myTesting$classe)
library(caret)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
install.packages(manipulate)
install.packages('manipulate')
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages('rCharts')
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE)print(d)
airquality
ui<- fluidPage()
library(shiny)
import(shiny)
install.packages(shiny)
install.packages("shiny")
library(shiny)
ui<- fluidPage()
server <- function(input, output) {}
shinyApp(ui= ui , server = server)
install.packages('rsconnect')
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='smcnish71', token='BAE95C8CA912B052BDE57EC808E9A955', secret='rL+9cm6rkX5VnY6jfEAlVPigagEJJwdQuGWaeuk8')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(devtools)
install_github('slidify', 'smcnish/slidifyLibraries')
install_github('slidifyLibraries', 'smcnish/slidifyLibraries')
library(devtools)
2.install_github('slidify', 'ramnathv')
3.install_github('slidifyLibraries', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
author("mydeck")
ward1<-read.csv("~/raw data/",header=TRUE)
setwd("C:/Users/smcnish/Documents/Vizs/Crime/DC-Crime/")
ward1<-read.csv("~/raw data/Ward 1.txt",header=TRUE)
getwd()
setwd("C:/Users/smcnish/Documents/Vizs/Crime/DC-Crime/raw data/")
ward1<-read.csv("Ward 1.txt",header=TRUE)
list.files()
setwd("C:/Users/smcnish/Documents/Vizs/Crime/DC-Crime/raw data/")
file_list <- list.files()
for (file in file_list){
# if the merged dataset doesn't exist, create it
if (!exists("dataset")){
dataset <- read.csv(file, header=TRUE)
}
# if the merged dataset does exist, append to it
if (exists("dataset")){
temp_dataset <-read.csv(file, header=TRUE)
dataset<-rbind(dataset, temp_dataset)
rm(temp_dataset)
}
}
head(dataset)
dataset$REPORT_DAT<- as.Date(dataset$REPORT_DAT, format = "%m/%d/%Y %H:%M:%S")
class(dataset$REPORT_DAT)
#clean up variables
dataset$REPORT_DAT<- as.POSIXct(dataset$REPORT_DAT, format = "%m/%d/%Y %H:%M:%S")
dataset$REPORT_DAT<- as.POSIXct(dataset$REPORT_DAT, format = "%m/%d/%Y %H:%M:%S")
setwd("C:/Users/smcnish/Documents/Vizs/Crime/DC-Crime/raw data/")
#append all 8 files together
file_list <- list.files()
for (file in file_list){
# if the merged dataset doesn't exist, create it
if (!exists("dataset")){
dataset <- read.csv(file, header=TRUE)
}
# if the merged dataset does exist, append to it
if (exists("dataset")){
temp_dataset <-read.csv(file, header=TRUE)
dataset<-rbind(dataset, temp_dataset)
rm(temp_dataset)
}
}
#clean up variables
dataset$REPORT_DAT<- as.POSIXct(dataset$REPORT_DAT, format = "%m/%d/%Y %H:%M:%S")
#append all 8 files together
file_list <- list.files()
for (file in file_list){
# if the merged dataset doesn't exist, create it
if (!exists("dataset")){
dataset <- read.csv(file, header=TRUE)
}
# if the merged dataset does exist, append to it
if (exists("dataset")){
temp_dataset <-read.csv(file, header=TRUE)
dataset<-rbind(dataset, temp_dataset)
rm(temp_dataset)
}
}
setwd("C:/Users/smcnish/Documents/Vizs/Crime/DC-Crime/raw data/")
#append all 8 files together
file_list <- list.files()
for (file in file_list){
# if the merged dataset doesn't exist, create it
if (!exists("dataset")){
dataset <- read.csv(file, header=TRUE)
}
# if the merged dataset does exist, append to it
if (exists("dataset")){
temp_dataset <-read.csv(file, header=TRUE)
dataset<-rbind(dataset, temp_dataset)
rm(temp_dataset)
}
}
#clean up variables
#clean up variables
dataset$REPORT_DAT2<- as.POSIXct(dataset$REPORT_DAT, format = "%m/%d/%Y %H:%M:%S")
head(dataset)
setwd("C:/Users/smcnish/Documents/Vizs/Crime/DC-Crime/raw data/")
#append all 8 files together
file_list <- list.files()
for (file in file_list){
# if the merged dataset doesn't exist, create it
if (!exists("dataset")){
dataset <- read.csv(file, header=TRUE)
}
# if the merged dataset does exist, append to it
if (exists("dataset")){
temp_dataset <-read.csv(file, header=TRUE)
dataset<-rbind(dataset, temp_dataset)
rm(temp_dataset)
}
}
#clean up variables
dataset$REPORT_DAT2<- as.POSIXlt(dataset$REPORT_DAT, format = "%m/%d/%Y %H:%M:%S")
head(dataset)
dataset$REPORT_DAT2<- as.POSIXlt(dataset$REPORT_DAT, format = "%m/%d/%Y %H:%M:%S %p")
head(dataset)
#append all 8 files together
file_list <- list.files()
for (file in file_list){
# if the merged dataset doesn't exist, create it
if (!exists("dataset")){
dataset <- read.csv(file, header=TRUE)
}
# if the merged dataset does exist, append to it
if (exists("dataset")){
temp_dataset <-read.csv(file, header=TRUE)
dataset<-rbind(dataset, temp_dataset)
rm(temp_dataset)
}
}
#clean up variables
dataset$REPORT_DAT2<- as.POSIXlt(dataset$REPORT_DAT, format = "%m/%d/%Y %H:%M:%S %p")
head(dataset)
#clean up variables
dataset$REPORT_DAT2<- as.POSIXlt(dataset$REPORT_DAT, format = "%m/%d/%Y %H:%M:%S %P")
difftime(dataset[1,1],dataset[2,1], unites="minutes")
difftime(dataset[1,1],dataset[2,1], units="minutes")
difftime(dataset[1,19],dataset[2,19], units="minutes")
difftime(dataset[1,19],dataset[2,19], units="mins")
difftime(dataset[1,19],dataset[2,19], units="days")
dataset$REPORT_DAT2<- as.POSIXlt(dataset$REPORT_DAT, format = "%m/%d/%Y %I:%M:%S %p")
head(dataset)
setwd("C:/Users/smcnish/Documents/Vizs/Crime/DC-Crime/raw data/")
#append all 8 files together
file_list <- list.files()
for (file in file_list){
# if the merged dataset doesn't exist, create it
if (!exists("dataset")){
dataset <- read.csv(file, header=TRUE)
}
# if the merged dataset does exist, append to it
if (exists("dataset")){
temp_dataset <-read.csv(file, header=TRUE)
dataset<-rbind(dataset, temp_dataset)
rm(temp_dataset)
}
}
#clean up variables
dataset$REPORT_DAT<- as.POSIXlt(dataset$REPORT_DAT, format = "%m/%d/%Y %I:%M:%S %p")
dataset$START_DATE<- as.POSIXlt(dataset$START_DATE, format = "%m/%d/%Y %I:%M:%S %p")
dataset$END_DATE<- as.POSIXlt(dataset$END_DATE, format = "%m/%d/%Y %I:%M:%S %p")
library(ggplot2)
library(dplyr)
dataset %>% group_by(REPORT_DAT) %>% summarise(count = count(PSA)) %>%
ggplot(aes(x = REPORT_DAT, y = count)) + geom_line()
head(dataset)
qplot(dataset$XBLOCK,dataset$YBLOCK)
qplot(dataset$XBLOCK,dataset$YBLOCK, color=WARD)
qplot(dataset$XBLOCK,dataset$YBLOCK, color=dataset$WARD)
qplot(dataset$XBLOCK,dataset$YBLOCK, color=dataset$VOTING_PRECINCT)
library(plyr)
count(dataset, "WARD")
dataset$year <- dataset$REPORT_DAT$year+1900  # years since 1900
count(dataset, "year")
dataset$day <- dataset$REPORT_DAT$mday        # day of month
dataset$month <- dataset$REPORT_DAT$mon+1     # month of year (zero-indexed)
ggplot(data=dataset, aes(x=yea, fill=OFFENSE)) +
geom_bar(stat="count", position=position_dodge())
ggplot(data=dataset, aes(x=year, fill=OFFENSE)) +
geom_bar(stat="count", position=position_dodge())
dataset$year <- as.factor(dataset$REPORT_DAT$year+1900)  # years since 1900
ggplot(data=dataset, aes(x=year, fill=OFFENSE)) +
geom_bar(stat="count", position=position_dodge())
ggplot(data=dataset, aes(x=year, fill=WARD)) +
geom_bar(stat="count", position=position_dodge())
ggplot(data=dataset, aes(x=year, fill=METHOD)) +
geom_bar(stat="count", position=position_dodge())
#filter out 2017
dataset[dataset$year != '2017',]
#filter out 2017
dataset<-dataset[dataset$year != '2017',]
ggplot(data=dataset, aes(x=year, fill=METHOD)) +
geom_bar(stat="count", position=position_dodge())
ggplot(data=dataset, aes(x=year, fill=OFFENSE)) +
geom_bar(stat="count", position=position_dodge())
dataset$month <- as.factor(dataset$REPORT_DAT$mon+1)
ggplot(data=dataset, aes(x=month, group=year)) +
geom_line() +
geom_point()
ggplot(data=dataset, aes(x=month, y=count, group=year)) +
geom_line() +
geom_point()
ggplot(data=dataset, aes(x=month, group=year)) +
geom_line(aes(fill=..count..)mstat="bin" +
geom_point()
ggplot(data=dataset, aes(x=month, group=year)) +
geom_line(aes(fill=..count..)mstat="bin"
ggplot(data=dataset, aes(x=month, group=year)) +
geom_line(aes(fill=..count..),stat="bin"
)
ggplot(data=dataset, aes(x=month, group=year)) +
geom_line(aes(fill=..count..),stat="count" )
ggplot(data=dataset, aes(x=month, group=year, color=year)) +
geom_line(aes(fill=..count..),stat="count" )
ggplot(data=dataset, aes(x=year, fill=OFFENSE)) +
geom_bar(stat="count", position=position_dodge())
ggplot(data=dataset, aes(x=REPORT_DAT)) +
geom_line(aes(fill=..count..),stat="count" )
ggplot(data=dataset, aes(x=year)) +
geom_line(aes(fill=..count..),stat="count" )
ggplot(data=dataset, aes(x=year, fill=WARD)) +
geom_bar(stat="count", position=position_dodge())
dataset$WARD <- as.factor(dataset$WARD)
ggplot(data=dataset, aes(x=year, fill=WARD)) +
geom_bar(stat="count", position=position_dodge())
count(dataset, "WARD"~"OFFENSE")
count(dataset,"OFFENSE")
qplot(dataset$XBLOCK,dataset$YBLOCK, color=dataset$WARD)
etwd("C:/Users/smcnish/Documents/Vizs/Crime/DC-Crime/raw data/")
library(ggplot2)
library(dplyr)
library(plyr)
#append all 8 files together
file_list <- list.files()
for (file in file_list){
# if the merged dataset doesn't exist, create it
if (!exists("dataset")){
dataset <- read.csv(file, header=TRUE)
}
# if the merged dataset does exist, append to it
if (exists("dataset")){
temp_dataset <-read.csv(file, header=TRUE)
dataset<-rbind(dataset, temp_dataset)
rm(temp_dataset)
}
}
#clean up variables
dataset$REPORT_DAT<- as.POSIXlt(dataset$REPORT_DAT, format = "%m/%d/%Y %I:%M:%S %p")
dataset$day <- dataset$REPORT_DAT$mday        # day of month
dataset$month <- as.factor(dataset$REPORT_DAT$mon+1)     # month of year (zero-indexed)
dataset$year <- as.factor(dataset$REPORT_DAT$year+1900)  # years since 1900
dataset$START_DATE<- as.POSIXlt(dataset$START_DATE, format = "%m/%d/%Y %I:%M:%S %p")
dataset$END_DATE<- as.POSIXlt(dataset$END_DATE, format = "%m/%d/%Y %I:%M:%S %p")
dataset$WARD <- as.factor(dataset$WARD)
#filter out 2017
dataset<-dataset[dataset$year != '2017',]
qplot(dataset$XBLOCK,dataset$YBLOCK, color=dataset$WARD)
count(dataset, "WARD")
ggplot(data=dataset, aes(x=year, fill=WARD)) +
geom_bar(stat="count", position=position_dodge())
ggplot(data=dataset, aes(x=month, group=year, color=year)) +
geom_line(aes(fill=..count..),stat="count" )
count(dataset, "OFFENSE")
dataset %>% head(10)
df_daily <- dataset %>%
group_by(REPORT_DAT) %>%
summarize(count = n()) %>%
arrange(EPORT_DAT)
df_daily %>% head(10)
dataset$REPORT_DAT<- as.Date(dataset$REPORT_DAT, format = "%m/%d/%Y %I:%M:%S %p")
df_daily <- dataset %>%
group_by(REPORT_DAT) %>%
summarize(count = n()) %>%
arrange(EPORT_DAT)
df_daily %>% head(10)
}
#clean up variables
dataset$REPORT_DAT<- as.Date(dataset$REPORT_DAT, format = "%m/%d/%Y %I:%M:%S %p")
dataset$day <- dataset$REPORT_DAT$mday        # day of month
dataset$month <- as.factor(dataset$REPORT_DAT$mon+1)     # month of year (zero-indexed)
dataset$year <- as.factor(dataset$REPORT_DAT$year+1900)  # years since 1900
dataset$START_DATE<- as.POSIXlt(dataset$START_DATE, format = "%m/%d/%Y %I:%M:%S %p")
dataset$END_DATE<- as.Date(dataset$END_DATE, format = "%m/%d/%Y %I:%M:%S %p")
dataset$WARD <- as.Date(dataset$WARD)
dataset$REPORT_DAT<- as.Date(dataset[,REPORT_DAT], format = "%m/%d/%Y %I:%M:%S %p")
#clean up variables
dataset[,REPORT_DAT]<- as.Date(dataset[,REPORT_DAT], format = "%m/%d/%Y %I:%M:%S %p")
#clean up variables
dataset$REPORT_DAT<- as.POSIXlt(dataset$REPORT_DAT, format = "%m/%d/%Y %I:%M:%S %p")
dataset$day <- dataset$REPORT_DAT$mday        # day of month
dataset$month <- as.factor(dataset$REPORT_DAT$mon+1)     # month of year (zero-indexed)
dataset$year <- as.factor(dataset$REPORT_DAT$year+1900)  # years since 1900
dataset$START_DATE<- as.POSIXlt(dataset$START_DATE, format = "%m/%d/%Y %I:%M:%S %p")
dataset$END_DATE<- as.POSIXlt(dataset$END_DATE, format = "%m/%d/%Y %I:%M:%S %p")
dataset$WARD <- as.POSIXlt(dataset$WARD)
df_daily <- dataset %>%
group_by(REPORT_DAT) %>%
summarize(count = n()) %>%
arrange(REPORT_DAT)
df_daily <- dataset %>%
group_by(REPORT_DAT) %>%
summarize(count = n()) %>%
arrange(REPORT_DAT)
library(ggplot2)
library(dplyr)
library(plyr)
#append all 8 files together
file_list <- list.files()
for (file in file_list){
# if the merged dataset doesn't exist, create it
if (!exists("dataset")){
dataset <- read.csv(file, header=TRUE)
}
# if the merged dataset does exist, append to it
if (exists("dataset")){
temp_dataset <-read.csv(file, header=TRUE)
dataset<-rbind(dataset, temp_dataset)
rm(temp_dataset)
}
}
#clean up variables
dataset$REPORT_DAT<- as.POSIXlt(dataset$REPORT_DAT, format = "%m/%d/%Y %I:%M:%S %p")
dataset$day <- dataset$REPORT_DAT$mday        # day of month
dataset$month <- as.factor(dataset$REPORT_DAT$mon+1)     # month of year (zero-indexed)
dataset$year <- as.factor(dataset$REPORT_DAT$year+1900)  # years since 1900
dataset$START_DATE<- as.POSIXlt(dataset$START_DATE, format = "%m/%d/%Y %I:%M:%S %p")
dataset$END_DATE<- as.POSIXlt(dataset$END_DATE, format = "%m/%d/%Y %I:%M:%S %p")
#filter out 2017
dataset<-dataset[dataset$year != '2017',]
qplot(dataset$XBLOCK,dataset$YBLOCK, color=dataset$WARD)
count(dataset, "OFFENSE")
#ggplot(data=dataset, aes(x=year, fill=WARD)) +
#  geom_bar(stat="count", position=position_dodge())
#ggplot(data=dataset, aes(x=month, group=year, color=year)) +#
#  geom_line(aes(fill=..count..),stat="count" )
df_daily <- dataset %>%
group_by(REPORT_DAT) %>%
summarize(count = n()) %>%
arrange(REPORT_DAT)
#clean up variables
dataset$REPORT_DAT<- as.Date(dataset$REPORT_DAT, format = "%m/%d/%Y %I:%M:%S %p")
df_daily <- dataset %>%
group_by(REPORT_DAT) %>%
summarize(count = n()) %>%
arrange(REPORT_DAT)
df_daily %>% head(10)
#clean up variables
dataset$REPORT_DAT<- as.Date(dataset$REPORT_DAT, format = "%m/%d/%Y %I:%M:%S %p")
dataset$day <- dataset$REPORT_DAT$mday        # day of month
dataset$month <- as.factor(dataset$REPORT_DAT$mon+1)     # month of year (zero-indexed)
dataset$year <- as.factor(dataset$REPORT_DAT$year+1900)  # years since 1900
dataset$START_DATE<- as.Date(dataset$START_DATE, format = "%m/%d/%Y %I:%M:%S %p")
dataset$END_DATE<- as.Date(dataset$END_DATE, format = "%m/%d/%Y %I:%M:%S %p")
df_daily <- dataset %>%
group_by(REPORT_DAT) %>%
summarize(count = n()) %>%
arrange(REPORT_DAT)
df_daily %>% head(10)
df_daily <- dataset %>%
group_by(REPORT_DAT) %>%
summarize(count = n()) %>%
arrange(REPORT_DAT)
library(ggplot2)
library(plyr)
library(dplyr)
df_daily <- dataset %>%
group_by(REPORT_DAT) %>%
summarize(count = n()) %>%
arrange(REPORT_DAT)
df_daily %>% head(10)
library(ggplot2)
library(plyr)
library(dplyr)
